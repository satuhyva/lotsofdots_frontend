{"version":3,"sources":["components/styles/createNewStyles.js","components/creatingNew/CreateQuestion.js","components/creatingNew/SelectNumberOfVotesOneCanGive.js","components/creatingNew/CreateOptions.js","components/creatingNew/RadioButtonSelection.js","components/creatingNew/SelectDotColoringTheme.js","components/creatingNew/SelectCanVoteSameOptionSeveralTimes.js","components/creatingNew/SummaryForSaving.js","components/creatingNew/EventSavedInfoView.js","components/creatingNew/SaveNewVotingEvent.js","components/creatingNew/CreateNewVotingEvent.js","components/styles/voteStyles.js","components/voting/GetEventID.js","components/voting/GetVoterName.js","components/voting/helperFunctions.js","components/voting/Option.js","components/voting/DotIdentity.js","components/voting/GiveVotes.js","components/voting/MonitorOption.js","components/voting/MonitorVoting.js","components/voting/VotingOrMonitoringView.js","components/voting/Voting.js","components/styles/basicStyles.js","components/WelcomeView.js","components/LotsOfDots.js","App.js","index.js"],"names":["styles","StyleSheet","create","container","alignItems","appTitle","fontSize","fontWeight","color","marginTop","info","fontStyle","title","marginBottom","buttonView","backgroundColor","padding","borderRadius","buttonText","input","borderColor","borderWidth","width","adjustCountView","flexDirection","countsText","paddingLeft","paddingRight","buttonViewCounts","buttonTextCounts","radioButtonView","radioButtonLabelText","radioButtonWrap","alignContent","margin","buttonTextAdd","optionText","options","question","infoSummary","summary","buttonViewCancel","marginRight","buttonTextCancel","line","height","Dimensions","get","CreateQuestion","handleQuestionWasSaved","useState","newQuestion","setNewQuestion","View","style","Text","TextInput","multiline","value","onChangeText","text","trimmedText","getTrimmedText","length","TouchableOpacity","onPress","trimmed","keepOn","charAt","modified","substring","ChangeCountButton","changeCount","direction","SelectNumberOfVotesOneCanGive","handleCountWasSaved","countOfVotes","setCountOfVotes","CreateOptions","handleOptionsWereSaved","newOption","setNewOption","setOptions","ScrollView","map","option","key","numberOfVotesView","includes","updatedOptions","concat","RadioButtonSelection","handleChange","valueSelected","setValueSelected","React","createRef","valueReferences","values","selectedNew","newSelection","forEach","reference","current","animateButton","setTimeout","index","AnimatedRadioButtonRow","ref","forwardRef","props","Animated","Value","innerButtonSize","styleInnerButtonSize","useImperativeHandle","targetValue","parallel","timing","toValue","easing","Easing","elastic","duration","start","stylesRadio","rowView","buttonOuterCircle","buttonInnerCircle","radioButtonTextView","radioButtonText","toString","marginLeft","justifyContent","SelectDotColoringTheme","handleDotColoringThemeWasSaved","selectedTheme","setSelectedTheme","theme","SelectCanVoteSameOptionSeveralTimes","voteSameSeveralTimes","handleVoteSameSeveralTimesWasSaved","severalAllowed","setSeveralAllowed","SummaryForSaving","dotColoringTheme","cancelAll","updateSavedID","saveEventToDatabase","getUniqueID","a","keepLooking","newUniqueIDString","Math","floor","random","axios","data","console","log","newUniqueID","severalVotesToOne","newVoting","stringID","dotTheme","counts","severalSame","post","response","status","EventSavedInfoView","savedID","returnToWelcomePage","SaveNewVotingEvent","setSavedID","newEventID","CreateNewVotingEvent","questionIsSet","setQuestionIsSet","countIsSet","setCountIsSet","setDotColoringTheme","dotColoringThemeIsSet","setDotColoringThemeIsSet","setVoteSameSeveralTimes","voteSameSeveralTimesIsSet","setVoteSameSeveralTimesIsSet","optionsAreSet","setOptionsAreSet","count","selectedOption","optionContainer","voterContainer","buttonsContainer","voteButtonText","voteButtonView","optionAndDotContainer","optionView","dotsContainer","flexWrap","notVotedText","identityMapView","GetEventID","updateEventID","ID","setID","GetVoterName","updateName","eventID","voters","voterName","setVoterName","nameIsTaken","setNameIsTaken","selectName","updatedVoters","updateData","put","result","getOptionsSortedAccordingToVoterCount","optionsWithVoters","sort","option1","option2","count1","Option","optionsVoted","handleOptionsVotedChanged","event","hasBeenVotedAtLeastOnce","votesStillLeft","canGiveSeveralVotesToOneOption","toggleVoting","action","voteButtonColoringStyle","getVoteButtonColoringStyle","unvoteButtonColoringStyle","getUnvoteButtonColoringStyle","colors","disabled","dotsOfOtherVoters","voter","indexOf","coloring","allDots","item","push","displayDots","Dot","dotStyle","DotIdentity","dotColor","name","lastIsOrange","GiveVotes","updateVotingState","setOptionsVoted","updateOptionsVoted","sortedOptionsWithVoters","saveSelectedVotingActions","saveSelectedVotings","person","getNumberOfOccurencies","array","i","wasRemoved","votersUpdatedForAnonymousCases","updatedVoterName","numberOfAnonymous","updatedOptionsWithVoters","numberOfOccurencies","MonitorOption","MonitorVoting","lastIsWhite","TryAgain","VotingOrMonitoringView","votingDone","viewOnly","loadingEvent","tryAgain","namingReady","Voting","setEventID","setNamingReady","setLoadingEvent","setTryAgain","setEvent","setVotingDone","useEffect","then","exception","infoText1","infoText2","appContainer","appInfo","WelcomeView","startCreatingVotingEvent","startVotingInAnEvent","LotsOfDots","createNew","setCreateNew","voteInExisting","setVoteInExisting","viewCurrentSituation","setViewCurrentSituation","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83339a37.chunk.js","sourcesContent":["import { StyleSheet, Dimensions } from 'react-native'\n\nexport const styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n    },\n    appTitle: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        color: '#3A3A38',\n        marginTop: 40,\n    },\n    info: {\n        fontSize: 15,\n        fontStyle: 'italic',\n        color: '#3A3A38',\n    },\n    title: {\n        fontSize: 20,\n        color: '#3A3A38',\n        marginTop: 10,\n        fontWeight: 'bold',\n        marginBottom: 5,\n    },\n    buttonView: {\n        backgroundColor: '#3A3A38',\n        padding: 8,\n        borderRadius: 7,\n        marginTop: 10,\n        alignItems: 'center',\n    },\n    buttonText: {\n        fontSize: 18,\n        color: '#EEEFE3',\n        fontWeight: 'bold',\n    },\n    input: {\n        borderColor: '#3A3A38',\n        borderWidth: 1,\n        borderRadius: 7,\n        padding: 10,\n        marginTop: 10,\n        backgroundColor: 'white',\n        width: 200,\n        color: '#3A3A38',\n    },\n    adjustCountView: {\n        flexDirection: 'row',\n        marginTop: 10,\n        marginBottom: 10,\n    },\n    countsText: {\n        fontSize: 30,\n        color: '#3A3A38',\n        marginTop: 10,\n        fontWeight: 'bold',\n        paddingLeft: 15,\n        paddingRight: 15,\n    },\n    buttonViewCounts: {\n        padding: 5,\n        marginTop: 10,\n        alignItems: 'center',\n        borderRadius: 7,\n        borderWidth: 1,\n        borderColor: '#3A3A38',\n    },\n    buttonTextCounts: {\n        fontSize: 20,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n    },\n    radioButtonView: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    radioButtonLabelText: {\n        fontSize: 18,\n        paddingLeft: 10,\n        color: '#3A3A38',\n    },\n    radioButtonWrap: {\n        alignContent: 'center',\n        margin: 2,\n    },\n    buttonTextAdd: {\n        fontSize: 20,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n    },\n    optionText: {\n        fontSize: 17,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n    },\n    options: {\n        marginTop: 5,\n    },\n    question: {\n        fontSize: 18,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n        marginTop: 20,\n        marginBottom: 5,\n    },\n    infoSummary: {\n        fontSize: 15,\n        fontStyle: 'italic',\n        color: '#3A3A38',\n        marginTop: 15,\n        marginBottom: 5,\n    },\n    summary: {\n        fontSize: 18,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n        marginBottom: 5,\n    },\n    buttonViewCancel: {\n        padding: 5,\n        marginTop: 10,\n        alignItems: 'center',\n        borderRadius: 7,\n        borderWidth: 1,\n        borderColor: '#3A3A38',\n        marginRight: 10,\n    },\n    buttonTextCancel: {\n        fontSize: 20,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n    },\n    line: {\n        height: 1,\n        width: Dimensions.get('window').width / 1.2,\n        backgroundColor: '#3A3A38',\n        marginTop: 3,\n        marginBottom: 20,\n    },\n})\n\n\n\n\n\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\n\n\nconst CreateQuestion = ({ handleQuestionWasSaved }) => {\n\n    const [newQuestion, setNewQuestion] = useState('')\n    const handleQuestionChanged = (text) => {\n        const trimmedText = getTrimmedText(text)\n        setNewQuestion(trimmedText)\n    }\n    const saveCurrentQuestion = () => {\n        handleQuestionWasSaved(newQuestion)\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>What is the voting about?</Text>\n            <Text style={styles.info}>What is it that you want to decide on?</Text>\n            <Text style={styles.info}>What needs to be prioritized?</Text>\n            <Text style={styles.info}>Write the question in the box below.</Text>\n            <TextInput style={styles.input}\n                multiline={true}\n                value={newQuestion}\n                onChangeText={handleQuestionChanged}\n            />\n            {newQuestion !== '' && newQuestion.length > 2 ?\n                <View style={styles.container}>\n                    <TouchableOpacity style={styles.buttonView} onPress={saveCurrentQuestion}>\n                        <Text style={styles.buttonText}>NEXT</Text>\n                    </TouchableOpacity>\n                </View>\n                : null\n            }\n        </View>\n    )\n}\n\nexport default CreateQuestion\n\n\n\nconst getTrimmedText = (text) => {\n    let trimmed = text\n    let keepOn = true\n    while (keepOn && trimmed.length > 0) {\n        if (trimmed.charAt(0) === ' ') {\n            if (trimmed.length > 1) {\n                const modified = trimmed.substring(1)\n                trimmed = modified\n            } else {\n                trimmed = ''\n                keepOn = false\n            }\n        } else {\n            keepOn = false\n        }\n    }\n    return trimmed\n}\n\n\n\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\n\n\nconst ChangeCountButton = ({ changeCount, direction }) => {\n    return (\n        <TouchableOpacity style={styles.buttonViewCounts} onPress={() => changeCount(direction)}>\n            <Text style={styles.buttonTextCounts}>{direction}</Text>\n        </TouchableOpacity>\n    )\n}\n\n\nconst SelectNumberOfVotesOneCanGive = ({ handleCountWasSaved }) => {\n\n    const [countOfVotes, setCountOfVotes] = useState(1)\n\n    const changeCount = (direction) => {\n        if (direction === 'less') {\n            if (countOfVotes > 1) {\n                setCountOfVotes(countOfVotes - 1)\n            }\n        } else if (countOfVotes < 5) {\n            setCountOfVotes(countOfVotes + 1)\n        }\n    }\n    const saveSelectedCount = () => {\n        handleCountWasSaved(countOfVotes)\n    }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>How many votes can one give?</Text>\n            <Text style={styles.info}>Each person has a minimum of one vote.</Text>\n            <Text style={styles.info}>But if you want, they can have more than one vote.</Text>\n            <Text style={styles.info}>Maximum is five votes.</Text>\n            <Text style={styles.info}>Adjust the vote count to your liking.</Text>\n\n            <View style={styles.adjustCountView}>\n                <ChangeCountButton changeCount={changeCount} direction=\"less\"/>\n                <Text style={styles.countsText}>{countOfVotes}</Text>\n                <ChangeCountButton changeCount={changeCount} direction=\"more\"/>\n            </View>\n\n            <View style={styles.container}>\n                <TouchableOpacity style={styles.buttonView} onPress={saveSelectedCount}>\n                    <Text style={styles.buttonText}>NEXT</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default SelectNumberOfVotesOneCanGive\n\n\n\n\n\n\n\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, ScrollView } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\n\n\nconst CreateOptions = ({ handleOptionsWereSaved }) => {\n\n    const [newOption, setNewOption] = useState('')\n    const [options, setOptions] = useState([])\n\n    const handleOptionChanged = (text) => {\n        const trimmedText = getTrimmedText(text)\n        setNewOption(trimmedText)\n    }\n    const addNewOption = () => {\n        const updatedOptions = options.concat(newOption)\n        setNewOption('')\n        setOptions(updatedOptions)\n    }\n\n    const saveCurrentOptions = () => {\n        handleOptionsWereSaved(options)\n    }\n\n    const displayOptions = () => {\n        return (\n            options.map(option => {\n                return (\n                    <Text style={styles.optionText} key={option}> ⦾ {option}</Text>\n                )\n            })\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <ScrollView>\n                <Text style={styles.title}>Answering options</Text>\n                <Text style={styles.info}>The number of answering options</Text>\n                <Text style={styles.info}>must be between 2 and 10.</Text>\n                <Text style={styles.info}>Add new options using the box below.</Text>\n                <View style={styles.options}>\n                    {displayOptions()}\n                </View>\n\n                <View style={styles.numberOfVotesView}>\n                    <TextInput style={styles.input}\n                        multiline={true}\n                        value={newOption}\n                        onChangeText={handleOptionChanged}\n                    />\n                    {newOption !== '' && !options.includes(newOption) ?\n                        <View style={styles.container}>\n                            <TouchableOpacity onPress={addNewOption}>\n                                <Text style={styles.buttonTextAdd}>ADD</Text>\n                            </TouchableOpacity>\n                        </View>\n                        : null\n                    }\n                </View>\n\n                {options.length > 1 ?\n                    <View style={styles.container}>\n                        <TouchableOpacity style={styles.buttonView} onPress={saveCurrentOptions}>\n                            <Text style={styles.buttonText}>NEXT</Text>\n                        </TouchableOpacity>\n                    </View>\n                    : null\n                }\n            </ScrollView>\n\n        </View>\n    )\n}\n\nexport default CreateOptions\n\n\nconst getTrimmedText = (text) => {\n    let trimmed = text\n    let keepOn = true\n    while (keepOn && trimmed.length > 0) {\n        if (trimmed.charAt(0) === ' ') {\n            if (trimmed.length > 1) {\n                const modified = trimmed.substring(1)\n                trimmed = modified\n            } else {\n                trimmed = ''\n                keepOn = false\n            }\n        } else {\n            keepOn = false\n        }\n    }\n    return trimmed\n}\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View,  TouchableOpacity, Animated, Easing, StyleSheet } from 'react-native'\n\n\nconst RadioButtonSelection = ({ handleChange, options }) => {\n\n    const [valueSelected, setValueSelected] = useState('')\n    const [valueReferences] = useState(options.map(option => React.createRef()))\n    const [values] = useState(options)\n\n    const selectedNew = (newSelection) => {\n        valueReferences.forEach(reference => {\n            reference.current.animateButton(newSelection)\n        })\n        setTimeout(() => {\n            setValueSelected(newSelection)\n            handleChange(newSelection)\n        }, 300)\n    }\n\n    return (\n        <View style={{ marginTop: 20 }}>\n            {values.map((value, index) => {\n                return (\n                    <AnimatedRadioButtonRow key={index} ref={valueReferences[index]} value={value} valueSelected={valueSelected} selectedNew={selectedNew}/>\n                )\n            })}\n        </View>\n    )\n}\n\nexport default RadioButtonSelection\n\n\n\n\nconst AnimatedRadioButtonRow = React.forwardRef((props, ref) => {\n\n    const [innerButtonSize] = useState(new Animated.Value(0))\n    const styleInnerButtonSize = { height:  innerButtonSize, width:  innerButtonSize }\n\n    useImperativeHandle(ref, () => {\n        return { animateButton }\n    })\n    const animateButton = (newSelection) => {\n        const animationDuration = 300\n        const targetValue = props.value === newSelection ? 20 : 0\n        Animated.parallel([\n            Animated.timing(innerButtonSize, {\n                toValue: targetValue,\n                easing: Easing.elastic(2),\n                duration: animationDuration,\n            }),\n        ]).start()\n    }\n\n    return (\n        <TouchableOpacity onPress={() => props.selectedNew(props.value)}>\n            <View style={stylesRadio.rowView}>\n                <View style={stylesRadio.buttonOuterCircle}>\n                    <Animated.View\n                        style={[stylesRadio.buttonInnerCircle, styleInnerButtonSize]}>\n                    </Animated.View>\n                </View>\n                <View style={stylesRadio.radioButtonTextView}>\n                    <Animated.Text style={stylesRadio.radioButtonText}>{props.value.toString()}</Animated.Text>\n                </View>\n            </View>\n        </TouchableOpacity>\n    )\n})\n\n\n\n\nconst stylesRadio = StyleSheet.create({\n\n    rowView: {\n        flexDirection: 'row',\n        marginBottom: 10,\n        alignItems: 'center',\n    },\n    radioButtonTextView: {\n        marginLeft: 10,\n    },\n    radioButtonText: {\n        fontSize: 15,\n        color: '#3A3A38',\n    },\n    buttonInnerCircle: {\n        backgroundColor: '#3A3A38',\n        height: 20,\n        width: 20,\n        borderRadius: 20,\n    },\n    buttonOuterCircle: {\n        height: 30,\n        width: 30,\n        borderRadius: 30,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderColor: '#3A3A38',\n        borderWidth: 1,\n    },\n})","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\nimport RadioButtonSelection from './RadioButtonSelection'\n\nconst SelectDotColoringTheme = ({ handleDotColoringThemeWasSaved }) => {\n\n    const [selectedTheme, setSelectedTheme] = useState('')\n    const themes = [\n        'all dots same color, no identities',\n        'different colors, no identities',\n        'different colors, show identities',\n    ]\n    const changeThemeSelection = (theme) => {\n        setSelectedTheme(theme)\n    }\n    const saveDotColoringTheme = () => {\n        handleDotColoringThemeWasSaved(selectedTheme)\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Dot colors and voter identities</Text>\n            <Text style={styles.info}>Should participants know how others voted?</Text>\n            <Text style={styles.info}>Should dots be colored according to voter?</Text>\n            <Text style={styles.info}>Should the names be revealed?</Text>\n            <RadioButtonSelection\n                handleChange={changeThemeSelection}\n                options={themes}\n            />\n\n            {selectedTheme !== '' ?\n                <View style={styles.container}>\n                    <TouchableOpacity style={styles.buttonView} onPress={saveDotColoringTheme}>\n                        <Text style={styles.buttonText}>NEXT</Text>\n                    </TouchableOpacity>\n                </View>\n                : null\n            }\n        </View>\n    )\n}\n\nexport default SelectDotColoringTheme\n\n\n\n\n\n\n\n\n\n// import React from 'react'\n// import { View, Text, TouchableOpacity } from 'react-native'\n// // import RadioForm, { RadioButton, RadioButtonInput, RadioButtonLabel } from 'react-native-simple-radio-button'\n// import { styles } from '../styles/createNewStyles.js'\n\n// const SelectDotColoringTheme = ({ dotColoringTheme, handleDotColoringThemeChanged, handleDotColoringThemeWasSaved }) => {\n\n//     const themes = [\n//         { label: 'all dots same color, no identities', value: 0 },\n//         { label: 'different colors, no identities', value: 1 },\n//         { label: 'different colors, show identities', value: 2 },\n//     ]\n//     const changeThemeSelection = (theme) => {\n//         handleDotColoringThemeChanged(theme)\n//     }\n//     const saveDotColoringTheme = () => {\n//         handleDotColoringThemeChanged('different colors, show identitieseme')\n//         handleDotColoringThemeWasSaved()\n//     }\n\n\n\n\n//     return (\n//         <View style={styles.container}>\n//             <Text style={styles.title}>Dot colors and voter identities</Text>\n//             <Text style={styles.info}>Should participants know how others voted?</Text>\n//             <Text style={styles.info}>Should dots be colored according to voter?</Text>\n//             <Text style={styles.info}>Should the names be revealed?</Text>\n\n//             {/* <RadioForm style={styles.radioButtonView}>\n//                 {themes.map((theme, index) => {\n//                     return (\n//                         <RadioButton animation={true} key={index} horizontal={true}>\n//                             <RadioButtonInput\n//                                 obj={theme}\n//                                 index={index}\n//                                 isSelected = {dotColoringTheme === theme.label}\n//                                 onPress={() => changeThemeSelection(theme.label)}\n//                                 borderWidth={1}\n//                                 buttonInnerColor={'#3A3A38'}\n//                                 buttonOuterColor={'#3A3A38'}\n//                                 buttonSize={16}\n//                                 buttonOuterSize={23}\n//                                 buttonWrapStyle={styles.radioButtonWrap}\n//                             />\n//                             <RadioButtonLabel\n//                                 obj={theme}\n//                                 index={index}\n//                                 labelHorizontal={true}\n//                                 onPress={() => changeThemeSelection(theme.label)}\n//                                 labelStyle={styles.radioButtonLabelText}\n//                             />\n//                         </RadioButton>\n//                     )\n//                 })}\n//             </RadioForm> */}\n//             {/* {dotColoringTheme !== '' ?\n//                 <View style={styles.container}>\n//                     <TouchableOpacity style={styles.buttonView} onPress={saveDotColoringTheme}>\n//                         <Text style={styles.buttonText}>NEXT</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//                 : null\n//             } */}\n//                 <View style={styles.container}>\n//                     <TouchableOpacity style={styles.buttonView} onPress={saveDotColoringTheme}>\n//                         <Text style={styles.buttonText}>NEXT</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//         </View>\n//     )\n// }\n\n// export default SelectDotColoringTheme\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\nimport RadioButtonSelection from './RadioButtonSelection'\n\n\nconst SelectCanVoteSameOptionSeveralTimes = ({ voteSameSeveralTimes, handleVoteSameSeveralTimesWasSaved }) => {\n\n    const [severalAllowed, setSeveralAllowed] = useState('')\n\n    const handleChangedSelection = (newSelection) => {\n        setSeveralAllowed(newSelection)\n    }\n\n    const saveSelection = () => {\n        handleVoteSameSeveralTimesWasSaved(severalAllowed)\n    }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Voting same option several times?</Text>\n            <Text style={styles.info}>Are voters allowed to give one or </Text>\n            <Text style={styles.info}>several votes to any single option?</Text>\n            <RadioButtonSelection\n                handleChange={handleChangedSelection}\n                options={['one vote per option per person', 'several votes per option per person']}\n            />\n            {severalAllowed !== '' ?\n                <View style={styles.container}>\n                    <TouchableOpacity style={styles.buttonView} onPress={saveSelection}>\n                        <Text style={styles.buttonText}>NEXT</Text>\n                    </TouchableOpacity>\n                </View>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nexport default SelectCanVoteSameOptionSeveralTimes\n\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\nimport axios from 'axios'\n\n\nconst SummaryForSaving = ({ newQuestion, countOfVotes, dotColoringTheme, options, voteSameSeveralTimes, cancelAll, updateSavedID  }) => {\n\n    const displayOptions = () => {\n        return (\n            <View style={styles.options}>\n                {options.map(option => {\n                    return (\n                        <Text style={styles.optionText} key={option}> ⦾ {option}</Text>\n                    )\n                })}\n            </View>\n\n        )\n    }\n    const saveCreatedEventToDatabase = () => {\n        saveEventToDatabase(newQuestion, countOfVotes, dotColoringTheme, options, voteSameSeveralTimes, updateSavedID)\n    }\n\n    return (\n        <View style={styles.container}>\n            <ScrollView>\n                <Text style={styles.infoSummary}>Question:</Text>\n                <Text style={styles.summary}>{newQuestion}</Text>\n                <Text style={styles.infoSummary}>Answering options:</Text>\n                {displayOptions()}\n                <Text style={styles.infoSummary}>Number of votes one can give:</Text>\n                <Text style={styles.summary}>{countOfVotes}</Text>\n                <Text style={styles.infoSummary}>Votes by one person per option:</Text>\n                <Text style={styles.summary}>{voteSameSeveralTimes}</Text>\n                <Text style={styles.infoSummary}>Dot coloring theme:</Text>\n                <Text style={styles.summary}>{dotColoringTheme}</Text>\n                <View style={styles.adjustCountView}>\n                    <TouchableOpacity style={styles.buttonViewCancel} onPress={cancelAll}>\n                        <Text style={styles.buttonTextCancel}>CANCEL</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.buttonView} onPress={saveCreatedEventToDatabase}>\n                        <Text style={styles.buttonText}>CREATE</Text>\n                    </TouchableOpacity>\n                </View>\n            </ScrollView>\n        </View>\n    )\n}\n\nexport default SummaryForSaving\n\n\nconst getUniqueID = async () => {\n    let keepLooking = true\n    let newUniqueIDString\n\n    while (keepLooking) {\n        newUniqueIDString = Math.floor(Math.random() * 1000000).toString()\n        if (newUniqueIDString.length === 6) {\n            try {\n                const votingWithID = await axios.get(`https://thawing-tor-45525.herokuapp.com/api/votings/${newUniqueIDString}`)\n                // const votingWithID = await axios.get(`http://localhost:3001/api/votings/${newUniqueIDString}`)\n                if (votingWithID.data.length === 0) {\n                    keepLooking = false\n                    return newUniqueIDString\n                }\n            } catch (exception) {\n                console.log('exception', exception)\n            }\n        }\n    }\n}\n\n\n\nconst saveEventToDatabase = async (newQuestion, countOfVotes, dotColoringTheme, options, voteSameSeveralTimes, updateSavedID) => {\n    const newUniqueID = await getUniqueID()\n    const severalVotesToOne = voteSameSeveralTimes === 'several votes per option per person' ? true : false\n    try {\n        const newVoting = {\n            stringID : newUniqueID,\n            question: newQuestion,\n            options: options,\n            dotTheme: dotColoringTheme,\n            counts: countOfVotes,\n            severalSame: severalVotesToOne,\n        }\n        const response = await axios.post('https://thawing-tor-45525.herokuapp.com/api/votings/', newVoting)\n        console.log('response', response)\n        // const response = await axios.post('http://localhost:3001/api/votings/', newVoting)\n        if (response.status === 200) {\n            updateSavedID(newUniqueID)\n        }\n\n    } catch (error) {\n        console.log('error in saving', error)\n    }\n}\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from '../styles/createNewStyles.js'\n\n\nconst EventSavedInfoView = ({ savedID, returnToWelcomePage }) => {\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>EVENT SUCCESFULLY CREATED</Text>\n            <Text style={styles.info}>Event ID for the newly created voting event:</Text>\n            <Text style={styles.title}>{savedID}</Text>\n            <Text style={styles.info}>Give this ID to those people</Text>\n            <Text style={styles.info}>whom you wish to participate in voting.</Text>\n            <View style={styles.container}>\n                <TouchableOpacity style={styles.buttonView} onPress={() => returnToWelcomePage()}>\n                    <Text style={styles.buttonText}>OK</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default EventSavedInfoView\n\n\n\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport SummaryForSaving from './SummaryForSaving'\nimport EventSavedInfoView from './EventSavedInfoView'\n\n\nconst SaveNewVotingEvent = ({ newQuestion, countOfVotes, dotColoringTheme, voteSameSeveralTimes, options, cancelAll, returnToWelcomePage }) => {\n\n    const [savedID, setSavedID] = useState('none')\n\n    const updateSavedID = (newEventID) => {\n        setSavedID(newEventID)\n    }\n\n    return (\n        <View>\n            {savedID === 'none' ?\n                <SummaryForSaving\n                    newQuestion={newQuestion}\n                    countOfVotes={countOfVotes}\n                    dotColoringTheme={dotColoringTheme}\n                    options={options}\n                    voteSameSeveralTimes={voteSameSeveralTimes}\n                    cancelAll={cancelAll}\n                    updateSavedID={updateSavedID}\n                />\n                :\n                <EventSavedInfoView\n                    savedID={savedID}\n                    returnToWelcomePage={returnToWelcomePage}\n                />\n            }\n        </View>\n    )\n}\n\nexport default SaveNewVotingEvent\n\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport CreateQuestion from './CreateQuestion'\nimport SelectNumberOfVotesOneCanGive from './SelectNumberOfVotesOneCanGive'\nimport CreateOptions from './CreateOptions'\nimport SelectDotColoringTheme from './SelectDotColoringTheme'\nimport SelectCanVoteSameOptionSeveralTimes from './SelectCanVoteSameOptionSeveralTimes'\nimport SaveNewVotingEvent from './SaveNewVotingEvent'\nimport { styles } from '../styles/createNewStyles.js'\n\nconst CreateNewVotingEvent = ({ returnToWelcomePage }) => {\n\n    const [newQuestion, setNewQuestion] = useState('')\n    const [questionIsSet, setQuestionIsSet] = useState(false)\n\n    const [countOfVotes, setCountOfVotes] = useState(1)\n    const [countIsSet, setCountIsSet] = useState(false)\n\n    const [dotColoringTheme, setDotColoringTheme] = useState('')\n    const [dotColoringThemeIsSet, setDotColoringThemeIsSet] = useState(false)\n\n    const [voteSameSeveralTimes, setVoteSameSeveralTimes] = useState('')\n    const [voteSameSeveralTimesIsSet, setVoteSameSeveralTimesIsSet] = useState(false)\n\n    const [options, setOptions] = useState([])\n    const [optionsAreSet, setOptionsAreSet] = useState(false)\n\n    const handleQuestionWasSaved = (question) => {\n        setNewQuestion(question)\n        setQuestionIsSet(true)\n    }\n\n    const handleCountWasSaved = (count) => {\n        setCountOfVotes(count)\n        setCountIsSet(true)\n    }\n\n    const handleDotColoringThemeWasSaved = (selectedTheme) => {\n        setDotColoringTheme(selectedTheme)\n        setDotColoringThemeIsSet(true)\n    }\n\n    const handleVoteSameSeveralTimesWasSaved = (selectedOption) => {\n        setVoteSameSeveralTimes(selectedOption)\n        setVoteSameSeveralTimesIsSet(true)\n    }\n\n    const handleOptionsWereSaved = (updatedOptions) => {\n        setOptions(updatedOptions)\n        setOptionsAreSet(true)\n    }\n\n    const cancelAll = () => {\n        setNewQuestion('')\n        setQuestionIsSet(false)\n        setCountOfVotes(1)\n        setCountIsSet(false)\n        setDotColoringTheme('')\n        setDotColoringThemeIsSet(false)\n        setVoteSameSeveralTimes('')\n        setVoteSameSeveralTimesIsSet(false)\n        setOptions('')\n        setOptionsAreSet(false)\n    }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.appTitle}>LotsOfDots</Text>\n            <Text style={styles.title}>CREATING A NEW VOTING EVENT</Text>\n            <Text style={styles.info}>Setting all the voting parameters.</Text>\n            <View style={styles.line}/>\n\n            {questionIsSet ? null :\n                <CreateQuestion\n                    handleQuestionWasSaved={handleQuestionWasSaved}\n                />\n            }\n            {questionIsSet && !countIsSet ?\n                <SelectNumberOfVotesOneCanGive\n                    handleCountWasSaved={handleCountWasSaved}\n                />\n                : null\n            }\n            {questionIsSet && countIsSet && !dotColoringThemeIsSet ?\n                <SelectDotColoringTheme\n                    dotColoringTheme={dotColoringTheme}\n                    handleDotColoringThemeWasSaved={handleDotColoringThemeWasSaved}\n                />\n                : null\n            }\n            {questionIsSet && countIsSet && dotColoringThemeIsSet && !optionsAreSet ?\n                <CreateOptions\n                    handleOptionsWereSaved={handleOptionsWereSaved}\n                />\n                : null\n            }\n            {questionIsSet && countIsSet && dotColoringThemeIsSet && optionsAreSet && !voteSameSeveralTimesIsSet ?\n                <SelectCanVoteSameOptionSeveralTimes\n                    voteSameSeveralTimes={voteSameSeveralTimes}\n                    handleVoteSameSeveralTimesWasSaved={handleVoteSameSeveralTimesWasSaved}\n                />\n                : null\n            }\n            {questionIsSet && countIsSet && dotColoringThemeIsSet && optionsAreSet && voteSameSeveralTimesIsSet ?\n                <SaveNewVotingEvent\n                    newQuestion={newQuestion}\n                    countOfVotes={countOfVotes}\n                    dotColoringTheme={dotColoringTheme}\n                    voteSameSeveralTimes={voteSameSeveralTimes}\n                    options={options}\n                    cancelAll={cancelAll}\n                    returnToWelcomePage={returnToWelcomePage}\n                />\n                : null\n            }\n        </View>\n    )\n}\nexport default CreateNewVotingEvent\n\n\n\n","import { StyleSheet, Dimensions } from 'react-native'\n\nexport const styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n    },\n    appTitle: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        color: '#3A3A38',\n        marginTop: 40,\n    },\n    info: {\n        fontSize: 15,\n        fontStyle: 'italic',\n        color: '#3A3A38',\n    },\n    title: {\n        fontSize: 20,\n        color: '#3A3A38',\n        marginTop: 10,\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#3A3A38',\n        padding: 8,\n        borderRadius: 7,\n        marginTop: 10,\n        alignItems: 'center',\n    },\n    buttonText: {\n        fontSize: 18,\n        color: '#EEEFE3',\n        fontWeight: 'bold',\n    },\n    input: {\n        borderColor: '#3A3A38',\n        borderWidth: 1,\n        borderRadius: 7,\n        padding: 10,\n        marginTop: 10,\n        backgroundColor: 'white',\n        width: 200,\n        color: '#3A3A38',\n    },\n    optionContainer: {\n        flexDirection: 'row',\n        marginTop: 10,\n    },\n    voterContainer: {\n        flexDirection: 'row',\n    },\n    buttonsContainer: {\n        // flexDirection: 'row',\n    },\n\n    voteButtonText: {\n        fontSize: 12,\n        color: '#EEEFE3',\n        fontWeight: 'bold',\n    },\n    voteButtonView: {\n        padding: 5,\n        borderRadius: 7,\n        alignItems: 'center',\n        marginBottom: 3,\n    },\n    optionAndDotContainer: {\n        marginLeft: 15,\n    },\n    optionView: {\n\n    },\n    optionText: {\n        fontSize: 18,\n        color: '#3A3A38',\n        fontWeight: 'bold',\n    },\n    dotsContainer: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        width: Dimensions.get('window').width / 2,\n    },\n    notVotedText: {\n        fontSize: 16,\n        color: '#3A3A38',\n        fontStyle: 'italic',\n    },\n    identityMapView: {\n        marginTop: 20,\n        marginLeft: 15,\n    },\n    line: {\n        height: 1,\n        width: Dimensions.get('window').width / 1.2,\n        backgroundColor: '#3A3A38',\n        marginTop: 3,\n        marginBottom: 20,\n    },\n})\n\n\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native'\nimport { styles } from '../styles/voteStyles.js'\n\nconst GetEventID = ({ updateEventID }) => {\n\n    const [ID, setID] = useState('')\n\n    const handleIDchanged = (text) => {\n        setID(text)\n    }\n\n    const updateID = () => {\n        updateEventID(ID)\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Event ID</Text>\n            <Text style={styles.info}>Event can be found with its ID.</Text>\n            <Text style={styles.info}>Write the 6-digit ID in the box below.</Text>\n            <TextInput style={styles.input}\n                multiline={true}\n                value={ID}\n                onChangeText={handleIDchanged}\n            />\n            {ID > 100000 && ID < 1000000 ?\n                <View style={styles.container}>\n                    <TouchableOpacity style={styles.buttonView} onPress={updateID}>\n                        <Text style={styles.buttonText}>GET EVENT</Text>\n                    </TouchableOpacity>\n                </View>\n                : null\n            }\n        </View>\n    )\n}\n\nexport default GetEventID\n\n\n\n\n\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native'\nimport { styles } from '../styles/voteStyles.js'\nimport axios from 'axios'\n\n\n\nconst GetVoterName = ({ updateName, eventID, voters }) => {\n\n    const [voterName, setVoterName] = useState('')\n    const [nameIsTaken, setNameIsTaken] = useState('false')\n\n    const handleVoterNameChanged = (text) => {\n        setVoterName(text)\n        if (voters.includes(text)) {\n            setNameIsTaken(true)\n        } else {\n            setNameIsTaken(false)\n        }\n    }\n\n    const selectName = async () => {\n        const updatedVoters = voters.concat(voterName)\n        const updateData = { voters: updatedVoters }\n        try {\n            const result = await axios.put(`https://thawing-tor-45525.herokuapp.com/api/votings/${eventID}`, updateData)\n            // const result = await axios.put(`http://localhost:3001/api/votings/${eventID}`, updateData)\n            if (result.status === 200 && result.data.voters.includes(voterName)) {\n                updateName(voterName)\n            } else {\n                setVoterName('')\n                setNameIsTaken(false)\n            }\n        } catch (exception) {\n            console.log('exception', exception)\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Your name</Text>\n            <Text style={styles.info}>Depending on the voting parameters,</Text>\n            <Text style={styles.info}>your name might be displayed.</Text>\n            <Text style={styles.info}>Please write your name below.</Text>\n            <TextInput style={styles.input}\n                multiline={true}\n                value={voterName}\n                onChangeText={handleVoterNameChanged}\n            />\n            {voterName !== '' && voterName.charAt(0) !== ' ' && !nameIsTaken ?\n                <View style={styles.container}>\n                    <TouchableOpacity style={styles.buttonView} onPress={selectName}>\n                        <Text style={styles.buttonText}>START VOTING</Text>\n                    </TouchableOpacity>\n                </View>\n                : null\n            }\n        </View>\n    )\n}\n\nexport default GetVoterName\n\n\n\n\n\n\n","\nexport const getOptionsSortedAccordingToVoterCount = (optionsWithVoters) => {\n    const sortedOptions = optionsWithVoters.sort((option1, option2) => {\n        const count1 = option1.voters.length\n        const count2 = option2.voters.length\n        return count2 - count1\n    })\n    return sortedOptions\n}\n\n\n\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from '../styles/voteStyles.js'\n\n\nconst Option = ({ option, voters, optionsVoted, handleOptionsVotedChanged, event }) => {\n\n    const hasBeenVotedAtLeastOnce = optionsVoted.includes(option.option)\n    const votesStillLeft = optionsVoted.length < event.counts ? true : false\n    const canGiveSeveralVotesToOneOption = event.severalSame\n\n    const toggleVoting = (action) => {\n        handleOptionsVotedChanged(action, option)\n    }\n\n    const voteButtonColoringStyle = getVoteButtonColoringStyle(votesStillLeft, canGiveSeveralVotesToOneOption, hasBeenVotedAtLeastOnce)\n    const unvoteButtonColoringStyle = getUnvoteButtonColoringStyle(hasBeenVotedAtLeastOnce)\n\n    const colors = ['#6B52CF','#978EBD', '#CE81ED', '#56AB39', '#C5DB37', '#C86131', '#645A64', '#39BDCD', '#E3304E', '#9F2BEE']\n\n    const displayDots = () => {\n        const dotsOfOtherVoters = option.voters.map((voter, index) => {\n            const color = (event.dotTheme === 'all dots same color, no identities') ?\n                '#645A64'\n                :\n                colors[voters.indexOf(voter)]\n            return <Dot key={index} coloring={color}/>\n        })\n        let allDots = [...dotsOfOtherVoters]\n        optionsVoted.forEach((item, index) => {\n            if (item === option.option) {\n                allDots.push(<Dot key={dotsOfOtherVoters.length + index} coloring={'orange'}/>)\n            }\n        })\n        if (allDots.length === 0) {\n            return <Text style={styles.notVotedText}>no votes yet</Text>\n        }\n        return allDots\n    }\n\n    return (\n        <View style={styles.optionContainer}>\n            <View style={styles.voterContainer}>\n                <View style={styles.buttonsContainer}>\n                    <TouchableOpacity onPress={() => toggleVoting('vote')} disabled={!votesStillLeft && !(hasBeenVotedAtLeastOnce && !canGiveSeveralVotesToOneOption)}>\n                        <View style={[styles.voteButtonView, voteButtonColoringStyle]}>\n                            <Text style={[styles.voteButtonText]}>VOTE</Text>\n                        </View>\n                    </TouchableOpacity>\n                    <TouchableOpacity onPress={() => toggleVoting('unvote')} disabled={!hasBeenVotedAtLeastOnce}>\n                        <View style={[styles.voteButtonView, unvoteButtonColoringStyle]}>\n                            <Text style={[styles.voteButtonText]}>UNVOTE</Text>\n                        </View>\n                    </TouchableOpacity>\n                </View>\n            </View>\n            <View style={styles.optionAndDotContainer}>\n                <View style={styles.optionView}>\n                    <Text style={styles.optionText}>{option.option}</Text>\n                </View>\n                <View style={styles.dotsContainer}>\n                    {displayDots()}\n                </View>\n            </View>\n        </View>\n    )\n}\n\n\nexport default Option\n\n\n// '#6B52CF' // sininen\n// '#978EBD' // vaal. sininen\n// '#CE81ED' // pinkki\n// '#56AB39' // vihreä\n// '#C5DB37' // keltainen\n// '#9B6B27' // ruskea\n// '#645A64' // harmaa\n// '#39BDCD' // turkoosi\n// '#E3304E' // punainen\n// '#9F2BEE' // violetti\n\nconst Dot = ({ coloring }) => {\n    // console.log('dot coloring option', coloring)\n    const dotStyle = { width: 20, height: 20, borderRadius: 10, margin: 1, backgroundColor: coloring }\n    return (\n        <View style={dotStyle}/>\n    )\n}\n\nconst getVoteButtonColoringStyle = (votesStillLeft, canGiveSeveralVotesToOneOption, hasBeenVotedAtLeastOnce) => {\n    if (votesStillLeft) {\n        if (hasBeenVotedAtLeastOnce && !canGiveSeveralVotesToOneOption) {\n            return { backgroundColor: '#D3D3C0' }\n        } else {\n            return { backgroundColor: '#3A3A38' }\n        }\n    } else {\n        return { backgroundColor: '#D3D3C0' }\n    }\n\n}\nconst getUnvoteButtonColoringStyle = (hasBeenVotedAtLeastOnce) => {\n    if (!hasBeenVotedAtLeastOnce) {\n        return { backgroundColor: '#D3D3C0' }\n    }\n    return { backgroundColor: '#3A3A38' }\n}\n\n","import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nconst Dot = ({ coloring }) => {\n    const dotStyle = { width: 15, height: 15, borderRadius: 15, margin: 1, backgroundColor: coloring }\n    return (\n        <View style={dotStyle}/>\n    )\n}\nconst colors = ['#6B52CF','#978EBD', '#CE81ED', '#56AB39', '#C5DB37', '#C86131', '#645A64', '#39BDCD', '#E3304E', '#9F2BEE']\n\nconst DotIdentity = ({ index, name, dotTheme, voters, lastIsOrange }) => {\n\n    let dotColor\n    if (index + 1 === voters.length && lastIsOrange) {\n        dotColor = 'orange'\n    } else if (dotTheme === 'all dots same color, no identities' || dotTheme === 'different colors, no identities') {\n        dotColor = '#645A64'\n    } else {\n        dotColor = colors[voters.indexOf(name)]\n    }\n\n    return (\n        <View style={styles.container}>\n            <Dot coloring={dotColor}/>\n            <Text>{name}</Text>\n        </View>\n    )\n}\n\nexport default DotIdentity\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n    },\n})\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\n// import firestore from '@react-native-firebase/firestore'\nimport { getOptionsSortedAccordingToVoterCount } from './helperFunctions.js'\nimport Option from './Option'\nimport DotIdentity from './DotIdentity'\nimport { styles } from '../styles/voteStyles.js'\nimport axios from 'axios'\n\n\n\nconst GiveVotes = ({ eventID, event, voterName, updateVotingState }) => {\n\n    // console.log('event', event)\n    const [optionsVoted, setOptionsVoted] = useState([])\n\n    const handleOptionsVotedChanged = (action, option) => {\n        // console.log('action, option', action, option)\n        updateOptionsVoted(action, option, optionsVoted, setOptionsVoted, event)\n    }\n\n    const sortedOptionsWithVoters = getOptionsSortedAccordingToVoterCount(event.optionsWithVoters)\n\n    const saveSelectedVotingActions = async () => {\n        await saveSelectedVotings(event, voterName, optionsVoted, eventID, updateVotingState)\n    }\n\n    const displayColorIdentityMapping = () => {\n        return event.voters.map((person, index) => {\n            return <DotIdentity key={person} index={index} name={person} dotTheme={event.dotTheme} voters={event.voters} lastIsOrange={true}/>\n        })\n\n    }\n\n    return (\n        <View>\n            <View style={styles.container}>\n                <Text style={styles.title}>{event.question}</Text>\n            </View>\n            {sortedOptionsWithVoters.map((option, index) => {\n                return (\n                    <Option\n                        key={index}\n                        option={option}\n                        dotTheme={event.dotTheme}\n                        voters={event.voters}\n                        optionsVoted={optionsVoted}\n                        countOfVotes={event.countOfVotes}\n                        handleOptionsVotedChanged={handleOptionsVotedChanged}\n                        event={event}\n                    />\n                )\n            })}\n            {event.dotTheme === 'different colors, show identities'?\n                <View style={styles.identityMapView}>\n                    <Text style={styles.info}>Voter identities:</Text>\n                    {displayColorIdentityMapping()}\n                </View>\n                : null\n            }\n\n            <View style={styles.container}>\n                <TouchableOpacity style={styles.buttonView} onPress={saveSelectedVotingActions}>\n                    <Text style={styles.buttonText}>SAVE YOUR VOTES</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default GiveVotes\n\n\n\nconst getNumberOfOccurencies = (array, text) => {\n\n    let count = 0\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === text) {\n            count++\n        }\n    }\n    return count\n}\n\nconst updateOptionsVoted = (action, option, optionsVoted, setOptionsVoted, event) => {\n    let updatedOptions = []\n    if (action === 'vote' ) {\n        if (optionsVoted.length < event.counts) {\n            updatedOptions = optionsVoted.concat(option.option)\n            setOptionsVoted(updatedOptions)\n        }\n    } else {\n        let wasRemoved = false\n        for (let i = 0; i < optionsVoted.length; i++) {\n            if (optionsVoted[i] === option.option && !wasRemoved) {\n                wasRemoved = true\n            } else {\n                updatedOptions.push(optionsVoted[i])\n            }\n            setOptionsVoted(updatedOptions)\n        }\n    }\n}\n\n\nconst saveSelectedVotings = async (event, voterName, optionsVoted, eventID, updateVotingState) => {\n    let votersUpdatedForAnonymousCases = [...event.voters]\n    let updatedVoterName = voterName\n    if (voterName === 'anonymous') {\n        const numberOfAnonymous = event.voters.length + 1\n        updatedVoterName = `anonymous${numberOfAnonymous}`\n        votersUpdatedForAnonymousCases.push(updatedVoterName)\n\n        const updateData = { voters: votersUpdatedForAnonymousCases }\n        try {\n            await axios.put(`https://thawing-tor-45525.herokuapp.com/api/votings/${eventID}`, updateData)\n            // const result = await axios.put(`http://localhost:3001/api/votings/${eventID}`, updateData)\n        } catch (exception) {\n            console.log('exception', exception)\n        }\n    }\n\n    const updatedOptionsWithVoters = event.optionsWithVoters.map(item => {\n        if (optionsVoted.includes(item.option)) {\n            let updatedOptionsWithVoters = [...item.voters]\n            const numberOfOccurencies = getNumberOfOccurencies(optionsVoted, item.option)\n            for (let i = 0; i < numberOfOccurencies; i++) {\n                updatedOptionsWithVoters.push(updatedVoterName)\n            }\n            return { option: item.option, voters: updatedOptionsWithVoters }\n        } else {\n            return item\n        }\n    })\n\n    const updateData = { optionsWithVoters: updatedOptionsWithVoters }\n    try {\n        const result = await axios.put(`https://thawing-tor-45525.herokuapp.com/api/votings/${eventID}`, updateData)\n        // const result = await axios.put(`http://localhost:3001/api/votings/${eventID}`, updateData)\n        if (result.status === 200) {\n            updateVotingState()\n        }\n    } catch (exception) {\n        console.log('exception', exception)\n    }\n}\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from '../styles/voteStyles.js'\n\n\nconst Dot = ({ coloring }) => {\n    const dotStyle = { width: 20, height: 20, borderRadius: 10, margin: 1, backgroundColor: coloring }\n    return (\n        <View style={dotStyle}/>\n    )\n}\n\n\nconst MonitorOption = ({ option, event }) => {\n\n    const colors = ['#6B52CF','#978EBD', '#CE81ED', '#56AB39', '#C5DB37', '#C86131', '#645A64', '#39BDCD', '#E3304E', '#9F2BEE']\n\n    const displayDots = () => {\n        const allDots = option.voters.map((voter, index) => {\n            const color = (event.dotTheme === 'all dots same color, no identities') ?\n                '#645A64'\n                :\n                colors[event.voters.indexOf(voter)]\n            return <Dot key={index} coloring={color}/>\n        })\n        if (allDots.length === 0) {\n            return <Text style={styles.notVotedText}>no votes yet</Text>\n        }\n        return allDots\n    }\n\n\n    return (\n        <View style={styles.optionContainer}>\n            <View style={styles.optionAndDotContainer}>\n                <View style={styles.optionView}>\n                    <Text style={styles.optionText}>{option.option}</Text>\n                </View>\n                <View style={styles.dotsContainer}>\n                    {displayDots()}\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default MonitorOption\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native'\nimport { getOptionsSortedAccordingToVoterCount } from './helperFunctions.js'\nimport DotIdentity from './DotIdentity'\nimport MonitorOption from './MonitorOption'\nimport { styles } from '../styles/voteStyles.js'\n\n\nconst MonitorVoting = ({ event, returnToWelcomePage }) => {\n\n    const sortedOptionsWithVoters = getOptionsSortedAccordingToVoterCount(event.optionsWithVoters)\n\n    const displayColorIdentityMapping = () => {\n        if (event.dotTheme === 'different colors, show identities') {\n            return event.voters.map((person, index) => {\n                return <DotIdentity key={person} index={index} name={person} dotTheme={event.dotTheme} voters={event.voters} lastIsWhite={false}/>\n            })\n        }\n        return null\n    }\n\n    return (\n        <ScrollView>\n            <View style={styles.container}>\n                <Text style={styles.title}>{event.question}</Text>\n            </View>\n            {sortedOptionsWithVoters.map((option, index) => {\n                return (\n                    <MonitorOption\n                        key={index}\n                        option={option}\n                        voters={event.voters}\n                        event={event}\n                    />\n                )\n            })}\n            {event.dotTheme === 'different colors, show identities' ?\n                <View style={styles.identityMapView}>\n                    <Text style={styles.info}>Voter identities:</Text>\n                    {displayColorIdentityMapping()}\n                </View>\n                : null\n            }\n            <View style={styles.container}>\n                <TouchableOpacity style={styles.buttonView} onPress={returnToWelcomePage}>\n                    <Text style={styles.buttonText}>RETURN TO START</Text>\n                </TouchableOpacity>\n            </View>\n        </ScrollView>\n    )\n}\n\n\nexport default MonitorVoting\n\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport GetVoterName from './GetVoterName'\nimport GiveVotes from './GiveVotes'\nimport MonitorVoting from './MonitorVoting'\nimport { styles } from '../styles/voteStyles.js'\n\n\nconst TryAgain = ({ returnToWelcomePage  }) => {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.info}>No voting event could be found with</Text>\n            <Text style={styles.info}>the ID you gave. Please try again.</Text>\n            <TouchableOpacity style={styles.buttonView} onPress={() => returnToWelcomePage()}>\n                <Text style={styles.buttonText}>RETURN</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\n\nconst VotingOrMonitoringView = ({ votingDone, viewOnly, eventID, event, loadingEvent, tryAgain, namingReady, updateName, voterName, updateVotingState, returnToWelcomePage }) => {\n\n    if (viewOnly && event === 'none' && !loadingEvent) {\n        return <TryAgain returnToWelcomePage={returnToWelcomePage}/>\n    }\n    if (votingDone || (viewOnly && eventID !== 'none' && !loadingEvent)) {\n        return (\n            <MonitorVoting\n                event={event}\n                returnToWelcomePage={returnToWelcomePage}\n            />\n        )\n    } else if (!viewOnly && !votingDone) {\n        return (\n            <View>\n                {eventID !== 'none' && loadingEvent && !tryAgain ?\n                    <Text style={styles.title}>LOADING EVENT...</Text>\n                    : null\n                }\n                {tryAgain && !loadingEvent ?\n                    <TryAgain returnToWelcomePage={returnToWelcomePage}/>\n                    : null\n                }\n                {event !== 'none' && !loadingEvent && !namingReady ?\n                    <GetVoterName\n                        updateName={updateName}\n                        eventID={eventID}\n                        voters={event.voters}\n                    />\n                    : null\n                }\n                {event !== 'none' && !loadingEvent && namingReady && !votingDone ?\n                    <GiveVotes\n                        eventID={eventID}\n                        event={event}\n                        voterName={voterName}\n                        updateVotingState={updateVotingState}\n                    />\n                    : null\n                }\n            </View>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default VotingOrMonitoringView\n\n","import React, { useState, useEffect } from 'react'\nimport { View, Text } from 'react-native'\nimport GetEventID from './GetEventID'\nimport { styles } from '../styles/voteStyles.js'\nimport axios from 'axios'\nimport VotingOrMonitoringView from './VotingOrMonitoringView'\n\nconst Voting = ({ returnToWelcomePage, viewOnly }) => {\n\n    const [eventID, setEventID] = useState('none')\n    const [voterName, setVoterName] = useState('anonymous')\n    const [namingReady, setNamingReady] = useState(false)\n    const [loadingEvent, setLoadingEvent] = useState(true)\n    const [tryAgain, setTryAgain] = useState(false)\n    const [event, setEvent] = useState('none')\n    const [votingDone, setVotingDone] = useState(false)\n\n    const updateEventID = (ID) => {\n        setEventID(ID)\n    }\n    const updateName = (name) => {\n        setVoterName(name)\n        setNamingReady(true)\n    }\n\n    const updateVotingState = () => {\n        setVotingDone(true)\n    }\n    useEffect(() => {\n        try {\n            if (eventID !== 'none') {\n                axios.get(`https://thawing-tor-45525.herokuapp.com/api/votings/${eventID}`)\n                // axios.get(`http://localhost:3001/api/votings/${eventID}`)\n                    .then((result) => {\n                        console.log('result', result)\n                        if (result.data && result.data.length === 1) {\n                            setEvent(result.data[0])\n                            if (result.data[0].dotTheme !== 'different colors, show identities') {\n                                setNamingReady(true)\n                            }\n                            setLoadingEvent(false)\n                        } else {\n                            setLoadingEvent(false)\n                            setTryAgain(true)\n                        }\n                    })\n            }\n        } catch (exception) {\n            console.log('exception', exception)\n        }\n    }, [eventID, voterName, votingDone])\n\n\n    const infoText1 = (viewOnly || votingDone) ? 'MONITOR VOTING' : 'GIVE YOUR VOTES'\n    const infoText2 = (viewOnly || votingDone) ? 'View current voting situation.' : 'Voting in the voting event.'\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.appTitle}>LotsOfDots</Text>\n            <Text style={styles.title}>{infoText1}</Text>\n            <Text style={styles.info}>{infoText2}</Text>\n            <View style={styles.line}/>\n\n            {eventID === 'none' ?\n                <GetEventID\n                    eventID={eventID}\n                    updateEventID={updateEventID}\n                />\n                : null\n            }\n            <VotingOrMonitoringView\n                votingDone={votingDone}\n                viewOnly={viewOnly}\n                eventID={eventID}\n                event={event}\n                loadingEvent={loadingEvent}\n                tryAgain={tryAgain}\n                namingReady={namingReady}\n                updateName={updateName}\n                voterName={voterName}\n                updateVotingState={updateVotingState}\n                returnToWelcomePage={returnToWelcomePage}/>\n        </View>\n    )\n}\n\nexport default Voting\n\n\n\n\n\n\n\n\n\n\n","import { StyleSheet, Dimensions } from 'react-native'\n\nexport const styles = StyleSheet.create({\n    appContainer: {\n        backgroundColor: '#EEEFE3',\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n    },\n    container: {\n        alignItems: 'center',\n    },\n    appTitle: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        color: '#3A3A38',\n        marginTop: 60,\n    },\n    appInfo: {\n        fontSize: 15,\n        fontStyle: 'italic',\n        color: '#3A3A38',\n    },\n    title: {\n        fontSize: 20,\n        color: '#3A3A38',\n        marginTop: 30,\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#3A3A38',\n        padding: 8,\n        borderRadius: 7,\n        marginTop: 10,\n        alignItems: 'center',\n    },\n    buttonText: {\n        fontSize: 18,\n        color: '#EEEFE3',\n        fontWeight: 'bold',\n    },\n    line: {\n        height: 1,\n        width: Dimensions.get('window').width / 1.2,\n        backgroundColor: '#3A3A38',\n        marginTop: 3,\n    },\n})\n\n\n","import React from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from './styles/basicStyles.js'\n\n\nconst WelcomeView = ({ startCreatingVotingEvent, startVotingInAnEvent, viewOnly }) => {\n    return (\n        <View style={styles.container}>\n\n            <Text style={styles.appTitle}>LotsOfDots</Text>\n            <Text style={styles.appInfo}>A little app for easy and simple</Text>\n            <Text style={styles.appInfo}>decision-making and prioritization</Text>\n            <Text style={styles.appInfo}>for groups of people.</Text>\n            <View style={styles.line}/>\n\n            <Text style={styles.title}>Create a new voting event?</Text>\n            <Text style={styles.appInfo}>Set the question and answering options</Text>\n            <Text style={styles.appInfo}>for a new voting event.</Text>\n            <TouchableOpacity style={styles.buttonView} onPress={startCreatingVotingEvent}>\n                <Text style={styles.buttonText}>CREATE</Text>\n            </TouchableOpacity>\n\n            <Text style={styles.title}>Vote in an existing event?</Text>\n            <Text style={styles.appInfo}>If you have a voting ID</Text>\n            <Text style={styles.appInfo}>you can go ahead and vote.</Text>\n            <TouchableOpacity style={styles.buttonView} onPress={startVotingInAnEvent}>\n                <Text style={styles.buttonText}>VOTE</Text>\n            </TouchableOpacity>\n\n            <Text style={styles.title}>View the current situation only</Text>\n            <Text style={styles.appInfo}>If you have an ID you can have a look</Text>\n            <Text style={styles.appInfo}>  at the current situation without voting.</Text>\n            <TouchableOpacity style={styles.buttonView} onPress={viewOnly}>\n                <Text style={styles.buttonText}>VIEW ONLY</Text>\n            </TouchableOpacity>\n\n        </View>\n    )\n}\n\nexport default WelcomeView\n","import React , { useState } from 'react'\nimport { View } from 'react-native'\nimport CreateNewVotingEvent from './creatingNew/CreateNewVotingEvent'\nimport Voting from '../components/voting/Voting'\nimport WelcomeView from './WelcomeView'\nimport { styles } from './styles/basicStyles.js'\n\n// https://htmlcolorcodes.com\n\nconst LotsOfDots = () => {\n\n    const [createNew, setCreateNew] = useState(false)\n    const [voteInExisting, setVoteInExisting] = useState(false)\n    const [viewCurrentSituation, setViewCurrentSituation] = useState(false)\n\n    const startCreatingVotingEvent = () => {\n        setCreateNew(true)\n    }\n    const startVotingInAnEvent = () => {\n        setVoteInExisting(true)\n    }\n    const returnToWelcomePage = () => {\n        setCreateNew(false)\n        setVoteInExisting(false)\n        setViewCurrentSituation(false)\n    }\n    const viewOnly = () => {\n        setViewCurrentSituation(true)\n    }\n\n    return (\n        <View style={styles.appContainer}>\n            {!createNew && !voteInExisting && !viewCurrentSituation ?\n                <WelcomeView\n                    startCreatingVotingEvent={startCreatingVotingEvent}\n                    startVotingInAnEvent={startVotingInAnEvent}\n                    viewOnly={viewOnly}\n                />\n                :\n                null\n            }\n            {createNew ?\n                <CreateNewVotingEvent returnToWelcomePage={returnToWelcomePage}/>\n                : null\n            }\n            {voteInExisting ?\n                <Voting  returnToWelcomePage={returnToWelcomePage} viewOnly={false}/>\n                : null\n            }\n            {viewCurrentSituation ?\n                <Voting  returnToWelcomePage={returnToWelcomePage} viewOnly={true}/>\n                : null\n            }\n        </View>\n    )\n}\nexport default LotsOfDots\n\n\n","import React from 'react'\nimport LotsOfDots from '../src/components/LotsOfDots'\n\nconst App = () => {\n    console.log('LotsOfDots HUHUU')\n\n    return (\n        <LotsOfDots/>\n    )\n}\nexport default App\n","/**\n * @format\n */\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}